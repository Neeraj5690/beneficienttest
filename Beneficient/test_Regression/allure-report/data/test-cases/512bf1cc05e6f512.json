{
  "uid" : "512bf1cc05e6f512",
  "name" : "test_CurrencyListSoSInvestments",
  "fullName" : "test_Regression.test_CurrenciesSoSInvestments#test_CurrencyListSoSInvestments",
  "historyId" : "2add5c3b4be6d2a3a9d6ee498cda870a",
  "time" : {
    "start" : 1628494935340,
    "stop" : 1628494963972,
    "duration" : 28632
  },
  "description" : "Test case to verify number of currencies in SoS Investments",
  "descriptionHtml" : "<p>Test case to verify number of currencies in SoS Investments</p>\n",
  "status" : "failed",
  "statusMessage" : "Failed: Failed to load SoS Investments Page",
  "statusTrace" : "test_setup = None\n\n    @pytest.mark.regression\n    @allure.description(\"Test case to verify number of currencies in SoS Investments\")\n    @allure.severity(severity_level=\"High\")\n    def test_CurrencyListSoSInvestments(test_setup):\n        driver.find_element_by_xpath(\"//*[@title='Quarterly NAV Close']\").click()\n        time.sleep(5)\n        PageTitle5 = driver.title\n        #print(PageTitle5)\n        ExpectedPageTitle = \"Quarterly NAV Close - BIDS\"\n        if PageTitle5==ExpectedPageTitle :\n            print(\"Quaterly NAV Close Page opened\")\n            time.sleep(5)\n            driver.find_element_by_xpath(\"//*[text()='Sign-Off Summary: Investments']\").click()\n            time.sleep(5)\n            PageTitle6 = driver.title\n            ExpectedPageTitle = \"User Input Task - BIDS\"\n            if PageTitle6 == ExpectedPageTitle:\n                print(\"SoS Investments Page opened\")\n                time.sleep(5)\n    \n                driver.find_element_by_xpath(\"//div[contains(text(),'Select Currency')]\").click()\n                try:\n                 driver.find_element_by_xpath(\"//div[contains(text(),'Select Currencys')]\").click()\n                except NoSuchElementException:\n                 allure.attach(driver.get_screenshot_as_png(), name=\"Image1\", attachment_type=allure.attachment_type.PNG)\n    \n            else:\n                try:\n>                driver.find_element_by_xpath(\"//div[contains(text(),'Select Currencys')]\").click()\n\ntest_Regression\\test_CurrenciesSoSInvestments.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9b11f8a7069e48e6feacec90e64c9b91\")>\nxpath = \"//div[contains(text(),'Select Currencys')]\"\n\n    def find_element_by_xpath(self, xpath):\n        \"\"\"\n        Finds an element by xpath.\n    \n        :Args:\n         - xpath - The xpath locator of the element to find.\n    \n        :Returns:\n         - WebElement - the element if it was found\n    \n        :Raises:\n         - NoSuchElementException - if the element wasn't found\n    \n        :Usage:\n            element = driver.find_element_by_xpath('//div/td[1]')\n        \"\"\"\n>       return self.find_element(by=By.XPATH, value=xpath)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:394: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9b11f8a7069e48e6feacec90e64c9b91\")>, by = 'xpath'\nvalue = \"//div[contains(text(),'Select Currencys')]\"\n\n    def find_element(self, by=By.ID, value=None):\n        \"\"\"\n        Find an element given a By strategy and locator. Prefer the find_element_by_* methods when\n        possible.\n    \n        :Usage:\n            element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if self.w3c:\n            if by == By.ID:\n                by = By.CSS_SELECTOR\n                value = '[id=\"%s\"]' % value\n            elif by == By.TAG_NAME:\n                by = By.CSS_SELECTOR\n            elif by == By.CLASS_NAME:\n                by = By.CSS_SELECTOR\n                value = \".%s\" % value\n            elif by == By.NAME:\n                by = By.CSS_SELECTOR\n                value = '[name=\"%s\"]' % value\n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:976: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9b11f8a7069e48e6feacec90e64c9b91\")>, driver_command = 'findElement'\nparams = {'using': 'xpath', 'value': \"//div[contains(text(),'Select Currencys')]\"}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B7E61916D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x773C7A7E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x773C7A4E+238]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[contains(text(),'Select Currencys')]\"}\nE         (Session info: chrome=92.0.4515.131)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\ntest_setup = None\n\n    @pytest.mark.regression\n    @allure.description(\"Test case to verify number of currencies in SoS Investments\")\n    @allure.severity(severity_level=\"High\")\n    def test_CurrencyListSoSInvestments(test_setup):\n        driver.find_element_by_xpath(\"//*[@title='Quarterly NAV Close']\").click()\n        time.sleep(5)\n        PageTitle5 = driver.title\n        #print(PageTitle5)\n        ExpectedPageTitle = \"Quarterly NAV Close - BIDS\"\n        if PageTitle5==ExpectedPageTitle :\n            print(\"Quaterly NAV Close Page opened\")\n            time.sleep(5)\n            driver.find_element_by_xpath(\"//*[text()='Sign-Off Summary: Investments']\").click()\n            time.sleep(5)\n            PageTitle6 = driver.title\n            ExpectedPageTitle = \"User Input Task - BIDS\"\n            if PageTitle6 == ExpectedPageTitle:\n                print(\"SoS Investments Page opened\")\n                time.sleep(5)\n    \n                driver.find_element_by_xpath(\"//div[contains(text(),'Select Currency')]\").click()\n                try:\n                 driver.find_element_by_xpath(\"//div[contains(text(),'Select Currencys')]\").click()\n                except NoSuchElementException:\n                 allure.attach(driver.get_screenshot_as_png(), name=\"Image1\", attachment_type=allure.attachment_type.PNG)\n    \n            else:\n                try:\n                 driver.find_element_by_xpath(\"//div[contains(text(),'Select Currencys')]\").click()\n                except NoSuchElementException:\n                 print(\"Exception found as SoS Investments Page not found\")\n                 allure.attach(driver.get_screenshot_as_png(), name=\"Image1\", attachment_type=allure.attachment_type.PNG)\n                 print(driver.title)\n>                pytest.fail(\"Failed to load SoS Investments Page\")\nE                Failed: Failed to load SoS Investments Page\n\ntest_Regression\\test_CurrenciesSoSInvestments.py:66: Failed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "test_setup",
    "time" : {
      "start" : 1628494926836,
      "stop" : 1628494935339,
      "duration" : 8503
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Entering username ",
      "time" : {
        "start" : 1628494930157,
        "stop" : 1628494930192,
        "duration" : 35
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "username",
        "value" : "'neeraj.kumar'"
      } ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Entering password ",
      "time" : {
        "start" : 1628494930192,
        "stop" : 1628494930242,
        "duration" : 50
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "password",
        "value" : "'Motorola@408'"
      } ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "hasContent" : true,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "description" : "Test case to verify number of currencies in SoS Investments",
    "status" : "failed",
    "statusMessage" : "Failed: Failed to load SoS Investments Page",
    "statusTrace" : "test_setup = None\n\n    @pytest.mark.regression\n    @allure.description(\"Test case to verify number of currencies in SoS Investments\")\n    @allure.severity(severity_level=\"High\")\n    def test_CurrencyListSoSInvestments(test_setup):\n        driver.find_element_by_xpath(\"//*[@title='Quarterly NAV Close']\").click()\n        time.sleep(5)\n        PageTitle5 = driver.title\n        #print(PageTitle5)\n        ExpectedPageTitle = \"Quarterly NAV Close - BIDS\"\n        if PageTitle5==ExpectedPageTitle :\n            print(\"Quaterly NAV Close Page opened\")\n            time.sleep(5)\n            driver.find_element_by_xpath(\"//*[text()='Sign-Off Summary: Investments']\").click()\n            time.sleep(5)\n            PageTitle6 = driver.title\n            ExpectedPageTitle = \"User Input Task - BIDS\"\n            if PageTitle6 == ExpectedPageTitle:\n                print(\"SoS Investments Page opened\")\n                time.sleep(5)\n    \n                driver.find_element_by_xpath(\"//div[contains(text(),'Select Currency')]\").click()\n                try:\n                 driver.find_element_by_xpath(\"//div[contains(text(),'Select Currencys')]\").click()\n                except NoSuchElementException:\n                 allure.attach(driver.get_screenshot_as_png(), name=\"Image1\", attachment_type=allure.attachment_type.PNG)\n    \n            else:\n                try:\n>                driver.find_element_by_xpath(\"//div[contains(text(),'Select Currencys')]\").click()\n\ntest_Regression\\test_CurrenciesSoSInvestments.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9b11f8a7069e48e6feacec90e64c9b91\")>\nxpath = \"//div[contains(text(),'Select Currencys')]\"\n\n    def find_element_by_xpath(self, xpath):\n        \"\"\"\n        Finds an element by xpath.\n    \n        :Args:\n         - xpath - The xpath locator of the element to find.\n    \n        :Returns:\n         - WebElement - the element if it was found\n    \n        :Raises:\n         - NoSuchElementException - if the element wasn't found\n    \n        :Usage:\n            element = driver.find_element_by_xpath('//div/td[1]')\n        \"\"\"\n>       return self.find_element(by=By.XPATH, value=xpath)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:394: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9b11f8a7069e48e6feacec90e64c9b91\")>, by = 'xpath'\nvalue = \"//div[contains(text(),'Select Currencys')]\"\n\n    def find_element(self, by=By.ID, value=None):\n        \"\"\"\n        Find an element given a By strategy and locator. Prefer the find_element_by_* methods when\n        possible.\n    \n        :Usage:\n            element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if self.w3c:\n            if by == By.ID:\n                by = By.CSS_SELECTOR\n                value = '[id=\"%s\"]' % value\n            elif by == By.TAG_NAME:\n                by = By.CSS_SELECTOR\n            elif by == By.CLASS_NAME:\n                by = By.CSS_SELECTOR\n                value = \".%s\" % value\n            elif by == By.NAME:\n                by = By.CSS_SELECTOR\n                value = '[name=\"%s\"]' % value\n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:976: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9b11f8a7069e48e6feacec90e64c9b91\")>, driver_command = 'findElement'\nparams = {'using': 'xpath', 'value': \"//div[contains(text(),'Select Currencys')]\"}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B7E61916D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x773C7A7E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x773C7A4E+238]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[contains(text(),'Select Currencys')]\"}\nE         (Session info: chrome=92.0.4515.131)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\ntest_setup = None\n\n    @pytest.mark.regression\n    @allure.description(\"Test case to verify number of currencies in SoS Investments\")\n    @allure.severity(severity_level=\"High\")\n    def test_CurrencyListSoSInvestments(test_setup):\n        driver.find_element_by_xpath(\"//*[@title='Quarterly NAV Close']\").click()\n        time.sleep(5)\n        PageTitle5 = driver.title\n        #print(PageTitle5)\n        ExpectedPageTitle = \"Quarterly NAV Close - BIDS\"\n        if PageTitle5==ExpectedPageTitle :\n            print(\"Quaterly NAV Close Page opened\")\n            time.sleep(5)\n            driver.find_element_by_xpath(\"//*[text()='Sign-Off Summary: Investments']\").click()\n            time.sleep(5)\n            PageTitle6 = driver.title\n            ExpectedPageTitle = \"User Input Task - BIDS\"\n            if PageTitle6 == ExpectedPageTitle:\n                print(\"SoS Investments Page opened\")\n                time.sleep(5)\n    \n                driver.find_element_by_xpath(\"//div[contains(text(),'Select Currency')]\").click()\n                try:\n                 driver.find_element_by_xpath(\"//div[contains(text(),'Select Currencys')]\").click()\n                except NoSuchElementException:\n                 allure.attach(driver.get_screenshot_as_png(), name=\"Image1\", attachment_type=allure.attachment_type.PNG)\n    \n            else:\n                try:\n                 driver.find_element_by_xpath(\"//div[contains(text(),'Select Currencys')]\").click()\n                except NoSuchElementException:\n                 print(\"Exception found as SoS Investments Page not found\")\n                 allure.attach(driver.get_screenshot_as_png(), name=\"Image1\", attachment_type=allure.attachment_type.PNG)\n                 print(driver.title)\n>                pytest.fail(\"Failed to load SoS Investments Page\")\nE                Failed: Failed to load SoS Investments Page\n\ntest_Regression\\test_CurrenciesSoSInvestments.py:66: Failed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "7c09276fb1c28cb",
      "name" : "Image1",
      "source" : "7c09276fb1c28cb.png",
      "type" : "image/png",
      "size" : 117319
    }, {
      "uid" : "b8b6b9e7402397c8",
      "name" : "stdout",
      "source" : "b8b6b9e7402397c8.txt",
      "type" : "text/plain",
      "size" : 104
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "test_setup::0",
    "time" : {
      "start" : 1628494964008,
      "stop" : 1628494966196,
      "duration" : 2188
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "High"
  }, {
    "name" : "tag",
    "value" : "regression"
  }, {
    "name" : "parentSuite",
    "value" : "test_Regression"
  }, {
    "name" : "suite",
    "value" : "test_CurrenciesSoSInvestments"
  }, {
    "name" : "host",
    "value" : "DESKTOP-JLLTS65"
  }, {
    "name" : "thread",
    "value" : "13716-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_Regression.test_CurrenciesSoSInvestments"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "regression" ]
  },
  "source" : "512bf1cc05e6f512.json",
  "parameterValues" : [ ]
}